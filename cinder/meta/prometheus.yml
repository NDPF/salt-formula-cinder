{%- from "cinder/map.jinja" import controller, volume, monitoring with context %}
{%- set is_controller = controller.get('enabled', False) %}
{%- set is_volume = volume.get('enabled', False) %}

{%- if is_controller or is_volume %}
server:
  alert:
{%- if is_controller %}
{%- set minor_threshold = monitoring.services_failed_warning_threshold_percent|float %}
{%- set major_threshold = monitoring.services_failed_critical_threshold_percent|float %}
{%- raw %}
    CinderAPIOutage:
      if: >-
        max(openstack_api_check_status{name=~"cinder.*"}) == 0
      labels:
        severity: critical
        service: cinder
      annotations:
        summary: "Cinder API outage"
        description: >-
            Cinder API check for the every available in the Openstack service catalog Cinder endpoint is down.
    CinderAPIDown:
      if: >-
        openstack_api_check_status{name=~"cinder.*"} == 0
      labels:
        severity: major
        service: cinder
      annotations:
        summary: "'{{ $labels.name }}' endpoint is down"
        description: >-
            Cinder API check for the '{{ $labels.name }}' endpoint is down.
    CinderAPIServiceDown:
      if: >-
        http_response_status{name=~"cinder-api"} == 0
      for: 2m
      labels:
        severity: minor
        service: cinder
      annotations:
        summary: "The HTTP check for the 'cinder-api' is down"
        description: >-
            The HTTP check for the 'cinder-api' on the '{{ $labels.host }}' is down for 2 minutes.
    CinderServiceDown:
      if: >-
          openstack_cinder_service_state == 0
      labels:
        severity: minor
        service: cinder
      annotations:
        summary: "The '{{ $labels.binary }}' is in down state"
        description: >-
            The '{{ $labels.binary }}' on the '{{ $labels.host }}' is in down state.
{%- endraw %}
    CinderServicesDownMinor:
      if: >-
          count(openstack_cinder_service_state == 0) by (binary) >= on (binary) count(openstack_cinder_service_state) by (binary) * {{minor_threshold}} and count(openstack_cinder_service_state == 0) by (binary) < on (binary) count(openstack_cinder_service_state) by (binary) * {{major_threshold}}
{%- raw %}
      labels:
        severity: minor
        service: cinder
      annotations:
        summary: "Medium percentage of '{{ $labels.binary }}' services are in down state"
        description: >-
            {{ $value }} '{{ $labels.binary }}' services are in down state {%- endraw %}(More than {{minor_threshold * 100}}% and less than {{major_threshold * 100}}%).{%- raw %}
{%- endraw %}
    CinderServicesDownMajor:
      if: >-
          count(openstack_cinder_service_state == 0) by (binary) >= on (binary) count(openstack_cinder_service_state) by (binary) * {{major_threshold}}
{%- raw %}
      labels:
        severity: major
        service: cinder
      annotations:
        summary: "High percentage of '{{ $labels.binary }}' services are in down state"
        description: >-
            {{ $value }} '{{ $labels.binary }}' services are in down state {%- endraw %}(More than {{major_threshold * 100}}%).{%- raw %}
{%- endraw %}
    CinderServiceOutage:
      if: >-
        count(openstack_cinder_service_state == 0) by (binary) == on (binary) count(openstack_cinder_service_state) by (binary)
{%- raw %}
      labels:
        severity: critical
        service: cinder
      annotations:
        summary: "'{{ $labels.binary }}' service outage"
        description: >-
            All '{{ $labels.binary }}' services are in down state.
{%- endraw %}
{%- endif %}
    CinderErrorLogsTooHigh:
      {%- set log_threshold = monitoring.error_log_rate|float %}
      if: >-
        sum(rate(log_messages{service="cinder",level=~"(?i:(error|emergency|fatal))"}[5m])) without (level) > {{ log_threshold }}
{%- raw %}
      labels:
        severity: warning
        service: cinder
      annotations:
        summary: "There are too many errors in Cinder logs"
        description: "The rate of errors in Cinder logs over the last 5 minutes is too high on node '{{ $labels.host }}' (current value={{ $value }}, threshold={%- endraw %}{{ log_threshold }})."
{%- endif %}
